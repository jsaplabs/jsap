{"version":3,"sources":["logo.svg","App.js","reportWebVitals.js","index.js"],"names":["App","countDownDate","Date","getTime","x","setInterval","now","distance","days","Math","floor","hours","minutes","seconds","document","getElementById","innerHTML","clearInterval","className","style","color","fontSize","id","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"gKAAe,I,WCiDAA,MA9Cf,WAGA,IAAIC,EAAgB,IAAIC,KAAK,yBAAyBC,UAGlDC,EAAIC,aAAY,WAGlB,IAAIC,GAAM,IAAIJ,MAAOC,UAGjBI,EAAWN,EAAgBK,EAG3BE,EAAOC,KAAKC,MAAMH,EAAQ,OAC1BI,EAAQF,KAAKC,MAAOH,EAAQ,MAAT,MACnBK,EAAUH,KAAKC,MAAOH,EAAQ,KAAT,KACrBM,EAAUJ,KAAKC,MAAOH,EAAQ,IAAkB,KAGpDO,SAASC,eAAe,QAAQC,UAAYR,EAAO,KAAOG,EAAQ,KAChEC,EAAU,KAAOC,EAAU,KAGzBN,EAAW,IACbU,cAAcb,GACdU,SAASC,eAAe,QAAQC,UAAY,aAE7C,KAED,OACE,qBAAKE,UAAU,MAAf,SACE,wBAAQA,UAAU,aAAlB,SACE,gCACE,oBAAIC,MAAO,CAACC,MAAM,MAAMC,SAAS,QAAjC,gCACA,uBACA,oDACF,oBAAIC,GAAG,SACP,mBAAGH,MAAO,CAACE,SAAS,QAApB,oDC9BOE,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFpB,SAASC,eAAe,SAM1BQ,K","file":"static/js/main.656e7ad8.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import logo from './logo.svg';\nimport './App.css';\n\nfunction App() {\n\n  // Set the date we're counting down to\nvar countDownDate = new Date(\"Nov 10, 2021 15:37:25\").getTime();\n\n// Update the count down every 1 second\nvar x = setInterval(function() {\n\n  // Get today's date and time\n  var now = new Date().getTime();\n    \n  // Find the distance between now and the count down date\n  var distance = countDownDate - now;\n    \n  // Time calculations for days, hours, minutes and seconds\n  var days = Math.floor(distance / (1000 * 60 * 60 * 24));\n  var hours = Math.floor((distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));\n  var minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));\n  var seconds = Math.floor((distance % (1000 * 60)) / 1000);\n    \n  // Output the result in an element with id=\"demo\"\n  document.getElementById(\"demo\").innerHTML = days + \"d \" + hours + \"h \"\n  + minutes + \"m \" + seconds + \"s \";\n    \n  // If the count down is over, write some text \n  if (distance < 0) {\n    clearInterval(x);\n    document.getElementById(\"demo\").innerHTML = \"EXPIRED\";\n  }\n}, 1000);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <div>\n          <h1 style={{color:'red',fontSize:'80px'}}>Maintenance Break!</h1>\n          <hr/>\n          <h1>We will be back in</h1>\n        <h2 id=\"demo\"></h2>\n        <p style={{fontSize:'12px'}}>Team JSAP - Let's make it done</p>\n        </div>\n      </header>\n    </div>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}